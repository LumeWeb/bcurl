/** Declaration file generated by dts-gen */

export class Client {
    declare public ssl: boolean;
    declare public strictSSL: boolean;
    declare public host: string;
    declare public port: number;
    declare public path: string;
    declare public headers: object;
    declare public username: string;
    declare public password: string;
    declare public id: string;
    declare public token: string;
    declare public timeout: number;
    declare public limit: number;
    declare public sequence: number;
    declare public opened: boolean;
    declare public socket: unknown;

    constructor(...args: any[]);

    auth(...args: any[]): void;

    bind(...args: any[]): void;

    call(...args: any[]): void;

    clone(...args: any[]): void;

    close(...args: any[]): void;

    del(...args: any[]): void;

    execute(...args: any[]): Promise<object>;

    fire(...args: any[]): void;

    get(...args: any[]): void;

    hook(...args: any[]): void;

    open(...args: any[]): void;

    patch(...args: any[]): void;

    post(...args: any[]): void;

    put(...args: any[]): void;

    request(...args: any[]): void;

    unbind(...args: any[]): void;

    unhook(...args: any[]): void;

    static captureRejectionSymbol: any;

    static captureRejections: boolean;

    static defaultMaxListeners: number;

    static errorMonitor: any;

    static getEventListeners(emitterOrTarget: any, type: any): any;

    static init(opts: any): void;

    static kMaxEventTargetListeners: any;

    static kMaxEventTargetListenersWarned: any;

    static listenerCount(emitter: any, type: any): any;

    static on(emitter: any, event: any, options: any): any;

    static once(emitter: any, name: any, options: any): any;

    static setMaxListeners(n: any, eventTargets: any): void;

    static usingDomains: boolean;

}

export function client(options: any): void;

export namespace Client {
    class EventEmitter {
        constructor(opts: any);

        addListener(type: any, listener: any): any;

        emit(type: any, args: any): any;

        eventNames(): any;

        getMaxListeners(): any;

        listenerCount(type: any): any;

        listeners(type: any): any;

        off(type: any, listener: any): any;

        on(type: any, listener: any): any;

        once(type: any, listener: any): any;

        prependListener(type: any, listener: any): any;

        prependOnceListener(type: any, listener: any): any;

        rawListeners(type: any): any;

        removeAllListeners(type: any, ...args: any[]): any;

        removeListener(type: any, listener: any): any;

        setMaxListeners(n: any): any;

        static EventEmitter: any;

        static captureRejectionSymbol: any;

        static captureRejections: boolean;

        static defaultMaxListeners: number;

        static errorMonitor: any;

        static getEventListeners(emitterOrTarget: any, type: any): any;

        static init(opts: any): void;

        static kMaxEventTargetListeners: any;

        static kMaxEventTargetListenersWarned: any;

        static listenerCount(emitter: any, type: any): any;

        static on(emitter: any, event: any, options: any): any;

        static once(emitter: any, name: any, options: any): any;

        static setMaxListeners(n: any, eventTargets: any): void;

        static usingDomains: boolean;

    }

}
